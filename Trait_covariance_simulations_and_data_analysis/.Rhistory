library(phytools, quietly = TRUE, warn.conflicts=FALSE)
library(tidyverse, quietly = TRUE, warn.conflicts=FALSE)
###############################
##      Load the trees       ##
###############################
gmpd_mam_tree <- read.tree("mammal_tree_clean.tre")
gmpd_para_tree <- read.tree("helminth_tree_clean.tre")
###############################
##  Format the GMPD Data     ##
###############################
data <- read.csv("GMPD_clean.csv")
## create a new data.frame with all possible host-parasite combinations
expand.grid(Host.species=(data$HostCorrectedName %>% unique),
Parasite.species=(data$ParasiteCorrectedName %>% unique)) -> ndata
## ncount = the number of times that each association occurs in data
## presence = incidence data (0/1 if the association occurs or not)
## nhosts.sampled = the number of times each host occurs in the GMPD
## nparas.sampled = the number of times each parasite occurs in the GMPD
mutate(ndata,
ncount=left_join(ndata, data %>% count(HostCorrectedName,ParasiteCorrectedName),
by=c("Host.species"="HostCorrectedName","Parasite.species"="ParasiteCorrectedName"))$n,
presence=ifelse(is.na(ncount),0,1),
nhosts.sampled=left_join(ndata, data %>% count(HostCorrectedName),
by=c("Host.species"="HostCorrectedName"))$n,
nparas.sampled=left_join(ndata, data %>% count(ParasiteCorrectedName),
by=c("Parasite.species"="ParasiteCorrectedName"))$n) -> gmpd_ndata
##################################
##      Primate-only data       ##
##################################
pdata <- subset(data, HostOrder=="Primates")
## prune the phylogenies to include only this data
primate_tree <- keep.tip(gmpd_mam_tree, gsub(" ","_",unique(pdata$HostCorrectedName)))
primate_para_tree <- keep.tip(gmpd_para_tree, gsub(" ","_",unique(pdata$ParasiteCorrectedName)))
## create a new data.frame with all possible host-parasite combinations
expand.grid(Host.species=(pdata$HostCorrectedName %>% unique),
Parasite.species=(pdata$ParasiteCorrectedName %>% unique)) -> primate_ndata
mutate(primate_ndata,
ncount=left_join(primate_ndata, pdata %>% count(HostCorrectedName,ParasiteCorrectedName),
by=c("Host.species"="HostCorrectedName","Parasite.species"="ParasiteCorrectedName"))$n,
presence=ifelse(is.na(ncount),0,1),
nhosts.sampled=left_join(primate_ndata, pdata %>% count(HostCorrectedName),
by=c("Host.species"="HostCorrectedName"))$n,
nparas.sampled=left_join(primate_ndata, pdata %>% count(ParasiteCorrectedName),
by=c("Parasite.species"="ParasiteCorrectedName"))$n) -> primate_ndata
primate_ndata$Host.species <- as.factor(as.character(primate_ndata$Host.species))
primate_ndata$Parasite.species <- as.factor(as.character(primate_ndata$Parasite.species))
##############################
##      Nearctic data       ##
##############################
## Load the trees
nearctic_mam_tree <- read.tree("nearctic_mammal_tree_clean.tre")
nearctic_para_tree <- read.tree("nearctic_helminth_tree_clean.tre")
## Load the data
nearctic_data <- read.csv("nearctic_data_clean.csv")
expand.grid(Host.species=(nearctic_data$Host %>% unique),
Parasite.species=(nearctic_data$Parasite %>% unique)) -> nearctic_ndata
mutate(nearctic_ndata,
ncount=left_join(nearctic_ndata, nearctic_data %>% count(Host,Parasite),
by=c("Host.species"="Host","Parasite.species"="Parasite"))$n,
presence=ifelse(is.na(ncount),0,1),
nhosts.sampled=left_join(nearctic_ndata, nearctic_data %>% count(Host),
by=c("Host.species"="Host"))$n,
nparas.sampled=left_join(nearctic_ndata, nearctic_data %>% count(Parasite),
by=c("Parasite.species"="Parasite"))$n) -> nearctic_ndata
## make sure you have a compiled Hommola.so available in this directory before running hommola()
source("Hommola.R")
hommola_results <- array(NA, dim=c(3,5))
colnames(hommola_results) <- c("dataset","value", "L1-pval", "L2-pval", "H-pval")
for (mod in 1:3) {
if (mod==1) {
dataset <- "GMPD"
mam_tree <- gmpd_mam_tree
para_tree <- gmpd_para_tree
ndata <- gmpd_ndata
} else if (mod==2) {
dataset <- "Primates"
mam_tree <- primate_tree
para_tree <- primate_para_tree
ndata <- primate_ndata
} else {
dataset <- "Nearctic"
mam_tree <- nearctic_mam_tree
para_tree <- nearctic_para_tree
ndata <- nearctic_ndata
}
# matrices for host and parasite based on the branch lengths in the phylogenetic tree
# (Note that differences in tree depth do not matter because of the use of corr=T)
ht<-vcv(mam_tree, corr=T)
pt<-vcv(para_tree, corr=T)
# incidence data
Y<-table(ndata$Host.species, ndata$Parasite.species, ndata$presence)[,,2]>0
## change names to match the phylogeny
rownames(Y) <- gsub(" ", "_", rownames(Y))
colnames(Y) <- gsub(" ", "_", colnames(Y))
## Metrics of Legendre, Ives & Godfray, and Hommola (see Appendix of Hadfield et al. 2014)
ch<-hommola(Y, ht,pt)
boot.1 <-1:1000
boot.2 <-1:1000
boot.3 <-1:1000
##################
## Permutations ##
##################
for(j in 1:1000){
Y2<-apply(Y, 2, sample)                     # Legendre permtations
boot.1[j]<-hommola(Y2, ht,pt)                 # Hommola metric
Y2<-apply(Y, 1, sample)
boot.2[j]<-hommola(Y2, pt, ht)
Y2<-Y[sample(1:nrow(Y)),sample(1:ncol(Y))]  # Hommola sampling
boot.3[j]<-hommola(Y2, ht,pt)
}
hommola_results[mod,] <- c(dataset, ch, sum(ch < boot.1)/1000, sum(ch < boot.2)/1000, sum(ch < boot.3)/1000)
}
hommola_results
## number of unique host-parasite associations
N<-sum(Y==1)
dh<-1:(N*(N-1)/2)
dp<-1:(N*(N-1)/2)
posh<-which(Y==1, arr.ind=T)[,1]-1
posp<-which(Y==1, arr.ind=T)[,2]-1
output <- .C("hommola",
as.integer(nrow(ht)),
as.integer(nrow(pt)),
as.integer(N),
as.double(c(ht)),
as.double(c(pt)),
as.integer(posh),
as.integer(posp),
as.double(dh),
as.double(dp)
)
cor(output[[8]],output[[9]])
mam_tree <- gmpd_mam_tree
para_tree <- gmpd_para_tree
ndata <- gmpd_ndata
ht<-vcv(mam_tree, corr=T)
pt<-vcv(para_tree, corr=T)
# incidence data
Y<-table(ndata$Host.species, ndata$Parasite.species, ndata$presence)[,,2]>0
## change names to match the phylogeny
rownames(Y) <- gsub(" ", "_", rownames(Y))
colnames(Y) <- gsub(" ", "_", colnames(Y))
## number of unique host-parasite associations
N<-sum(Y==1)
dh<-1:(N*(N-1)/2)
dp<-1:(N*(N-1)/2)
posh<-which(Y==1, arr.ind=T)[,1]-1
posp<-which(Y==1, arr.ind=T)[,2]-1
output <- .C("hommola",
as.integer(nrow(ht)),
as.integer(nrow(pt)),
as.integer(N),
as.double(c(ht)),
as.double(c(pt)),
as.integer(posh),
as.integer(posp),
as.double(dh),
as.double(dp)
)
d
dh
output[[8]]
plot(output[[8]],output[[9]])
plot(1-output[[8]],1-output[[9]])
plot(1-output[[8]],1-output[[9]], cex=0.5, xlab='Host distances', ylab='Parasite distances')
y = 1-output[[8]]
x = 1-output[[9]]
lm(y~x)
lm(x~y)
?cor
dh
output[[1]]
dh[1]
dp[1]
dh[2]
output[[8]][1]
output[[9]][1]
posh[1]
posp[1]
posp[2]
posh[2]
Y[1:5,1:5]
Y[1:15,1:15]
posh[2]
output[[9]]
output9[[1]]
output[[9]][1]
output[[8]][1]
1-output[[8]][1]
output[[9]][2]
output[[9]][20]
output[[8]][20]
1-output[[8]][20]
which(colnames(Y)=="Acionyx_jubatus")
rownames(Y)
rownames(Y)[1:20]
which(rownames(Y)%in%c("Acinonyx_jubatus","Crocuta_crocuta"))
Y[which(rownames(Y)%in%c("Acinonyx_jubatus","Crocuta_crocuta")),1:5]
Y[which(rownames(Y)%in%c("Acinonyx_jubatus","Crocuta_crocuta")),1:15]
Y[which(rownames(Y)%in%c("Acinonyx_jubatus","Crocuta_crocuta")),]
posh[20]
posp[h]
posp[20]
rownames(Y)=="Bison_bonasus"
which(rownames(Y)=="Bison_bonasus")
Y[which(rownames(Y)=="Bison_bonasus"),]
Y[which(rownames(Y)=="Bison_bonasus"),]=="TRUE"
which(Y[which(rownames(Y)=="Bison_bonasus"),]=="TRUE")
para_tree
pt
which(colnames(pt)=="Trichuris_ovis")
which(colnames(pt)=="Fasciola_hepatica")
which(rownames(pt)=="Fasciola_hepatica")
pt[201,162]
1-pt[201,162]
which(rownames(pt)=="")
which(rownames(pt)=="Trichinella_nelsoni")
1-pt[201,168]
1-pt[162,168]
which(rownames(ht)=="Bison_bonasus")
which(rownames(ht)=="Crocuta_crocuta")
ht[2,88]
1-ht[2,88]
x = c(rep(1,16), rep(0,84))
y = c(rep(1,21), rep(0,79))
?t.test
t.test(x,y)
## R0 = 4 plots
var1=c('c',    'c',    'shed', 'shed', 'c',   'alpha')
var2=c('gamma','alpha','gamma','alpha','shed','gamma')
i <- 1
data <- vector(mode='list', length=18)
setwd("~/Documents/GitHub/newGEM_SIR/Trait_covariance_simulations_and_data_analysis")
for (j in 1:6) { ## loop over the six different covariance combinations
for (covMatrix in c("nocorr", "negcorr", "poscorr")) {
z1 = readRDS(paste0(paste("out_R=4",covMatrix,"hivar",var1[j],var2[j],sep="_"),".RDS"))
z2 = readRDS(paste0(paste("out_R=4",covMatrix,"medvar",var1[j],var2[j],sep="_"),".RDS"))
z3 = readRDS(paste0(paste("out_R=4",covMatrix,"lowvar",var1[j],var2[j],sep="_"),".RDS"))
## Provide a label for each plot panel
panel <- paste0(LETTERS[j],switch(covMatrix,poscorr="(3)",negcorr="(1)",nocorr="(2)"))
## Give nicer names
covMatrix <- switch(covMatrix,poscorr="(+) Cov",negcorr="(-) Cov",nocorr="(0) Cov")
trait1 <- switch(var1[j],c="Contact",shed="Infectiousness",alpha="Virulence")
trait2 <- switch(var2[j],shed="Infectiousness",alpha="Virulence",gamma="Recovery")
z <- vector(mode='list',length=3)
lapply(1:length(z1), function(i) data.frame(peakSize=max(z1[[i]][[1]]$I,na.rm=TRUE), ## peak epidemic size
peakPrev=max(z1[[i]][[1]]$I/(z1[[i]][[1]]$S+z1[[i]][[1]]$I+z1[[i]][[1]]$R),na.rm=TRUE), ## peak prevalence
varR=var(filter(z1[[i]][[2]],is.finite(tEnd))$numInf),
numSSE=sum(filter(z1[[i]][[2]],is.finite(tEnd))$numInf > qpois(0.99,4)),
propSSE=sum(filter(z1[[i]][[2]],is.finite(tEnd))$numInf > qpois(0.99,4))/(filter(z1[[i]][[2]],is.finite(tEnd)) %>% nrow),
fadeout=ifelse(length(z1[[i]][[1]]$t)<99, 1, 0)) %>% # binary: did this replicate go extinct?
mutate(.,
disp=ifelse(fadeout==0, ifelse(inherits(try(glm.nb(filter(z1[[i]][[2]],is.finite(tEnd))$numInf~1)$theta),'try-error'), NA, glm.nb(filter(z1[[i]][[2]],is.finite(tEnd))$numInf~1)$theta), NA), ## dispersion parameter of negative binomial distribution fit to numInf
dispAlt=ifelse(peakSize > 10, ifelse(inherits(try(glm.nb(filter(z1[[i]][[2]],is.finite(tEnd))$numInf~1)$theta),'try-error'), NA, glm.nb(filter(z1[[i]][[2]],is.finite(tEnd))$numInf~1)$theta), NA), ## dispersion parameter of negative binomial distribution fit to numInf
rep=i)) %>%
do.call("rbind.data.frame",.) %>%
mutate(., Variance="high",cov=covMatrix, traits=paste(trait1,trait2,sep="-"), panelLab=panel) -> z[[1]]
lapply(1:length(z2), function(i) data.frame(peakSize=max(z2[[i]][[1]]$I,na.rm=TRUE), ## peak epidemic size
peakPrev=max(z2[[i]][[1]]$I/(z2[[i]][[1]]$S+z2[[i]][[1]]$I+z2[[i]][[1]]$R),na.rm=TRUE), ## peak prevalence
varR=var(filter(z2[[i]][[2]],is.finite(tEnd))$numInf),
numSSE=sum(filter(z2[[i]][[2]],is.finite(tEnd))$numInf > qpois(0.99,4)),
propSSE=sum(filter(z2[[i]][[2]],is.finite(tEnd))$numInf > qpois(0.99,4))/(filter(z2[[i]][[2]],is.finite(tEnd)) %>% nrow),
fadeout=ifelse(length(z2[[i]][[1]]$t)<99, 1, 0)) %>% # binary: did this replicate go extinct?
mutate(.,
disp=ifelse(fadeout==0, ifelse(inherits(try(glm.nb(filter(z2[[i]][[2]],is.finite(tEnd))$numInf~1)$theta),'try-error'), NA, glm.nb(filter(z2[[i]][[2]],is.finite(tEnd))$numInf~1)$theta), NA), ## dispersion parameter of negative binomial distribution fit to numInf
dispAlt=ifelse(peakSize > 10, ifelse(inherits(try(glm.nb(filter(z2[[i]][[2]],is.finite(tEnd))$numInf~1)$theta),'try-error'), NA, glm.nb(filter(z2[[i]][[2]],is.finite(tEnd))$numInf~1)$theta), NA), ## dispersion parameter of negative binomial distribution fit to numInf
rep=i)) %>%
do.call("rbind.data.frame",.) %>%
mutate(., Variance="med",cov=covMatrix, traits=paste(trait1,trait2,sep="-"), panelLab=panel) -> z[[2]]
lapply(1:length(z3), function(i) data.frame(peakSize=max(z3[[i]][[1]]$I,na.rm=TRUE), ## peak epidemic size
peakPrev=max(z3[[i]][[1]]$I/(z3[[i]][[1]]$S+z3[[i]][[1]]$I+z3[[i]][[1]]$R),na.rm=TRUE), ## peak prevalence
varR=var(filter(z3[[i]][[2]],is.finite(tEnd))$numInf),
numSSE=sum(filter(z3[[i]][[2]],is.finite(tEnd))$numInf > qpois(0.99,4)),
propSSE=sum(filter(z3[[i]][[2]],is.finite(tEnd))$numInf > qpois(0.99,4))/(filter(z3[[i]][[2]],is.finite(tEnd)) %>% nrow),
fadeout=ifelse(length(z3[[i]][[1]]$t)<99, 1, 0)) %>% # binary: did this replicate go extinct?
mutate(.,
disp=ifelse(fadeout==0, ifelse(inherits(try(glm.nb(filter(z3[[i]][[2]],is.finite(tEnd))$numInf~1)$theta),'try-error'), NA, glm.nb(filter(z3[[i]][[2]],is.finite(tEnd))$numInf~1)$theta), NA), ## dispersion parameter of negative binomial distribution fit to numInf
dispAlt=ifelse(peakSize > 10, ifelse(inherits(try(glm.nb(filter(z3[[i]][[2]],is.finite(tEnd))$numInf~1)$theta),'try-error'), NA, glm.nb(filter(z3[[i]][[2]],is.finite(tEnd))$numInf~1)$theta), NA), ## dispersion parameter of negative binomial distribution fit to numInf
rep=i)) %>%
do.call("rbind.data.frame",.) %>%
mutate(., Variance="low",cov=covMatrix, traits=paste(trait1,trait2,sep="-"), panelLab=panel) -> z[[3]]
data[[i]] <- do.call("rbind.data.frame",z)
i <- i+1
}
}
library(tidyverse)
library(magrittr)
library(MASS)
data <- vector(mode='list', length=18)
for (j in 1:6) { ## loop over the six different covariance combinations
for (covMatrix in c("nocorr", "negcorr", "poscorr")) {
z1 = readRDS(paste0(paste("out_R=4",covMatrix,"hivar",var1[j],var2[j],sep="_"),".RDS"))
z2 = readRDS(paste0(paste("out_R=4",covMatrix,"medvar",var1[j],var2[j],sep="_"),".RDS"))
z3 = readRDS(paste0(paste("out_R=4",covMatrix,"lowvar",var1[j],var2[j],sep="_"),".RDS"))
## Provide a label for each plot panel
panel <- paste0(LETTERS[j],switch(covMatrix,poscorr="(3)",negcorr="(1)",nocorr="(2)"))
## Give nicer names
covMatrix <- switch(covMatrix,poscorr="(+) Cov",negcorr="(-) Cov",nocorr="(0) Cov")
trait1 <- switch(var1[j],c="Contact",shed="Infectiousness",alpha="Virulence")
trait2 <- switch(var2[j],shed="Infectiousness",alpha="Virulence",gamma="Recovery")
z <- vector(mode='list',length=3)
lapply(1:length(z1), function(i) data.frame(peakSize=max(z1[[i]][[1]]$I,na.rm=TRUE), ## peak epidemic size
peakPrev=max(z1[[i]][[1]]$I/(z1[[i]][[1]]$S+z1[[i]][[1]]$I+z1[[i]][[1]]$R),na.rm=TRUE), ## peak prevalence
varR=var(filter(z1[[i]][[2]],is.finite(tEnd))$numInf),
numSSE=sum(filter(z1[[i]][[2]],is.finite(tEnd))$numInf > qpois(0.99,4)),
propSSE=sum(filter(z1[[i]][[2]],is.finite(tEnd))$numInf > qpois(0.99,4))/(filter(z1[[i]][[2]],is.finite(tEnd)) %>% nrow),
fadeout=ifelse(length(z1[[i]][[1]]$t)<99, 1, 0)) %>% # binary: did this replicate go extinct?
mutate(.,
disp=ifelse(fadeout==0, ifelse(inherits(try(glm.nb(filter(z1[[i]][[2]],is.finite(tEnd))$numInf~1)$theta),'try-error'), NA, glm.nb(filter(z1[[i]][[2]],is.finite(tEnd))$numInf~1)$theta), NA), ## dispersion parameter of negative binomial distribution fit to numInf
dispAlt=ifelse(peakSize > 10, ifelse(inherits(try(glm.nb(filter(z1[[i]][[2]],is.finite(tEnd))$numInf~1)$theta),'try-error'), NA, glm.nb(filter(z1[[i]][[2]],is.finite(tEnd))$numInf~1)$theta), NA), ## dispersion parameter of negative binomial distribution fit to numInf
rep=i)) %>%
do.call("rbind.data.frame",.) %>%
mutate(., Variance="high",cov=covMatrix, traits=paste(trait1,trait2,sep="-"), panelLab=panel) -> z[[1]]
lapply(1:length(z2), function(i) data.frame(peakSize=max(z2[[i]][[1]]$I,na.rm=TRUE), ## peak epidemic size
peakPrev=max(z2[[i]][[1]]$I/(z2[[i]][[1]]$S+z2[[i]][[1]]$I+z2[[i]][[1]]$R),na.rm=TRUE), ## peak prevalence
varR=var(filter(z2[[i]][[2]],is.finite(tEnd))$numInf),
numSSE=sum(filter(z2[[i]][[2]],is.finite(tEnd))$numInf > qpois(0.99,4)),
propSSE=sum(filter(z2[[i]][[2]],is.finite(tEnd))$numInf > qpois(0.99,4))/(filter(z2[[i]][[2]],is.finite(tEnd)) %>% nrow),
fadeout=ifelse(length(z2[[i]][[1]]$t)<99, 1, 0)) %>% # binary: did this replicate go extinct?
mutate(.,
disp=ifelse(fadeout==0, ifelse(inherits(try(glm.nb(filter(z2[[i]][[2]],is.finite(tEnd))$numInf~1)$theta),'try-error'), NA, glm.nb(filter(z2[[i]][[2]],is.finite(tEnd))$numInf~1)$theta), NA), ## dispersion parameter of negative binomial distribution fit to numInf
dispAlt=ifelse(peakSize > 10, ifelse(inherits(try(glm.nb(filter(z2[[i]][[2]],is.finite(tEnd))$numInf~1)$theta),'try-error'), NA, glm.nb(filter(z2[[i]][[2]],is.finite(tEnd))$numInf~1)$theta), NA), ## dispersion parameter of negative binomial distribution fit to numInf
rep=i)) %>%
do.call("rbind.data.frame",.) %>%
mutate(., Variance="med",cov=covMatrix, traits=paste(trait1,trait2,sep="-"), panelLab=panel) -> z[[2]]
lapply(1:length(z3), function(i) data.frame(peakSize=max(z3[[i]][[1]]$I,na.rm=TRUE), ## peak epidemic size
peakPrev=max(z3[[i]][[1]]$I/(z3[[i]][[1]]$S+z3[[i]][[1]]$I+z3[[i]][[1]]$R),na.rm=TRUE), ## peak prevalence
varR=var(filter(z3[[i]][[2]],is.finite(tEnd))$numInf),
numSSE=sum(filter(z3[[i]][[2]],is.finite(tEnd))$numInf > qpois(0.99,4)),
propSSE=sum(filter(z3[[i]][[2]],is.finite(tEnd))$numInf > qpois(0.99,4))/(filter(z3[[i]][[2]],is.finite(tEnd)) %>% nrow),
fadeout=ifelse(length(z3[[i]][[1]]$t)<99, 1, 0)) %>% # binary: did this replicate go extinct?
mutate(.,
disp=ifelse(fadeout==0, ifelse(inherits(try(glm.nb(filter(z3[[i]][[2]],is.finite(tEnd))$numInf~1)$theta),'try-error'), NA, glm.nb(filter(z3[[i]][[2]],is.finite(tEnd))$numInf~1)$theta), NA), ## dispersion parameter of negative binomial distribution fit to numInf
dispAlt=ifelse(peakSize > 10, ifelse(inherits(try(glm.nb(filter(z3[[i]][[2]],is.finite(tEnd))$numInf~1)$theta),'try-error'), NA, glm.nb(filter(z3[[i]][[2]],is.finite(tEnd))$numInf~1)$theta), NA), ## dispersion parameter of negative binomial distribution fit to numInf
rep=i)) %>%
do.call("rbind.data.frame",.) %>%
mutate(., Variance="low",cov=covMatrix, traits=paste(trait1,trait2,sep="-"), panelLab=panel) -> z[[3]]
data[[i]] <- do.call("rbind.data.frame",z)
i <- i+1
}
}
0.92*(5151.25+18432)-5151.25
11500*0.04
11500*0.23
11500*0.23/12
0.23/12*(10000+9000+8000+7000+6000+5000+4000+3000+2000+1000)
0.23/12*(11000+10000+9000+8000+7000+6000+5000+4000+3000+2000+1000)
