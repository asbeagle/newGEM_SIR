saveRDS(nearctic_mammal_tree, "Nearctic_mammal_tree.RDS")
saveRDS(nearctic_tree, "Nearctic_parasite_tree.RDS")
saveRDS(nearctic_assoc_data, "Nearctic_data.RDS")
saveRDS(GMPD_mammal_tree, "GMPD_mammal_tree.RDS")
saveRDS(global_tree, "GMPD_parasite_tree.RDS")
saveRDS(GMPDsmall, "GMPD_data.RDS")
knitr::opts_chunk$set(echo = FALSE,
dev=c('png','tiff'),
fig.path='figures/')
library(ape)
library(tidyverse)
library(ouch)
library(phytools)
library(geiger)
library(caper)
library(picante)
library(pmc)
library(corHMM)
library(OUwie)
Nearctic_mammal_tree <- readRDS("Nearctic_mammal_tree.RDS")
Nearctic_parasite_tree <- readRDS("Nearctic_parasite_tree.RDS")
Nearctic_data <- readRDS("Nearctic_data.RDS")
GMPD_mammal_tree <- readRDS("GMPD_mammal_tree.RDS")
GMPD_parasite_tree <- readRDS("GMPD_parasite_tree.RDS")
GMPD_data <- readRDS("GMPD_data.RDS")
Nearctic_mammal_tree
Nearctic_parasite_tree
Nearctic_data
Nearctic_parasite_tree$Host
Nearctic_data$Host
unique(Nearctic_data$Host)
unique(Nearctic_data$Parasite)
Nearctic_parasite_tree
GMPD_parasite_tree
unique(GMPD_data$ParasiteCorrectedName)
## load tree
tree<-read.nexus("hel2_44burn_copy.trees")
## load the binomial names for the coded tree names
nom <- read.csv("name_key.csv")
# make nom characters not factors
nom$CorrectName<-as.character(nom$CorrectName)
nom$Code<-as.character(nom$Code)
## ensure that every tip has a binomial name
which(!(tree$tip.label %in% nom[,2])) ## ZTGLUN does not have a binomial name - code should actually be ZYGLUN; fix
tree$tip.label[which(!(tree$tip.label %in% nom[,2]))] <- "ZYGLUN"
## drop 5 nematodes and a acanth that were clearly placed in the wrong areas of the tree
tree <- drop.tip(tree, c("HABMUS","ASCLUM","ASCSUU","PELSTR","FILMAR","PROELE")) #
## binomial names for only the species in the tree
nom[nom$Code %in% tree$tip.label,]->a
##nom in same order as tree tip labels
b<- a[match(tree$tip.label, a$Code),]
#replace code names with binomial names
tree$tip.label<-b$CorrectName
#rename the global tree for GMPD data
global_tree<-tree
## Read in GMPD data
GMPDmain<-read.csv("GMPD_main.csv")
GMPDparasite<-read.csv("GMPD_parasite_traits.csv")
#host-parasite association data
nearctic_assoc_data<-read.csv("Host_Range_Nearctic_Mammals_list.csv", header=T)
#change to characters instead of factors
nearctic_assoc_data$Host<-as.character(nearctic_assoc_data$Host)
nearctic_assoc_data$Parasite<-as.character(nearctic_assoc_data$Parasite)
## Load GMPD data and subset down to the species in the parasite phylogeny
GMPDsmall<-GMPDmain[GMPDmain$ParasiteCorrectedName %in% global_tree$tip.label, ]
GMPDsmall[which(GMPDsmall$HostReportedName=="Macaca hecki / M. tonkeana hybrid"),"HostCorrectedName"] <- "Macaca hecki" ## based on details from that study
GMPDsmall[which(GMPDsmall$HostReportedName=="Hapalemur sp."),"HostCorrectedName"] <- "Hapalemur griseus" ## based on collection location, this is the only species found there
GMPDsmall[which(rownames(GMPDsmall)=="11772"),"HostCorrectedName"] <- "Papio anubis" ## based on collection location
GMPDsmall[which(rownames(GMPDsmall)=="11773"),"HostCorrectedName"] <- "Papio ursinus" ## based on collection location
GMPDsmall[which(rownames(GMPDsmall)=="11862"),"HostCorrectedName"] <- "Papio anubis" ## based on collection location
GMPDsmall[which(rownames(GMPDsmall)=="11863"),"HostCorrectedName"] <- "Papio anubis" ## based on collection location
GMPDsmall[which(rownames(GMPDsmall)=="11864"),"HostCorrectedName"] <- "Papio anubis" ## based on collection location
GMPDsmall[which(rownames(GMPDsmall)=="11865"),"HostCorrectedName"] <- "Papio ursinus" ## based on collection location
GMPDsmall[which(rownames(GMPDsmall)=="11866"),"HostCorrectedName"] <- "Papio ursinus" ## based on collection location
GMPDsmall[which(rownames(GMPDsmall)=="11903"),"HostCorrectedName"] <- "Papio anubis" ## based on collection location
##load complete mammal tree from PHYLACINE
large_mam_tree<-read.nexus("mammal_phylo_consensus.nex")
large_mam_tree$tip.label<-gsub("_", " ", large_mam_tree$tip.label)
#### MAKE A MAMMAL TREE FOR HOSTS IN THE GMPD DATASET ####
## Make GMPD names match Elton binomial names found in the tree
GMPDsmall$HostCorrectedName<-gsub("Cercopithecus albogularis", "Cercopithecus mitis", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Equus burchelli", "Equus quagga", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Equus quaggai", "Equus quagga", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Otaria flavescens", "Otaria byronia", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Cercopithecus lhoesti","Allochrocebus lhoesti", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Equus caballus","Equus ferus", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Lama glama","Lama guanicoe", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Bos frontalis","Bos gaurus", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Equus asinus", "Equus hemionus", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Equus asinus", "Equus hemionus", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Monachus schauinslandi", "Neomonachus schauinslandi", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Neotragus moschatus", "Neotragus pygmaeus", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Ovis aries", "Ovis orientalis", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Taurotragus oryx", "Tragelaphus oryx", GMPDsmall$HostCorrectedName)
##remove records from the GMPD (all from primates) where hosts were identified only to genus (super-weird that this happened!)
GMPDsmall <- GMPDsmall[GMPDsmall$HostCorrectedName!="no binomial name",]
##prune large tree to only include mammals from the GMPD
GMPD_mammal_tree<-drop.tip(large_mam_tree, setdiff(large_mam_tree$tip.label, GMPDsmall$HostCorrectedName))
#### MAKE A MAMMAL TREE FOR HOSTS IN THE NEARCTIC DATASET ####
## Modify the names in the Nearctic dataset to match the names on the large mammal tree
gsub("Mustela vison", "Neovison vison", nearctic_assoc_data$Host) -> nearctic_assoc_data$Host
## rename Alces alces (Eurasian elk) to Alces americanus (American moose) - these are sister species (or even subspecies) so any phylogenetic conclusions are unaltered in an analysis containing only one of the two species
gsub("Alces americanus", "Alces alces", nearctic_assoc_data$Host) -> nearctic_assoc_data$Host
## rename Arctic fox in the data
gsub("Alopex lagopus", "Vulpes lagopus", nearctic_assoc_data$Host) -> nearctic_assoc_data$Host
## rename American porcupine in the data
gsub("Erethizon dorsatus", "Erethizon dorsatum", nearctic_assoc_data$Host) -> nearctic_assoc_data$Host
nearctic_assoc_data$Host
setdiff(nearctic_assoc_data$Host, large_mam_tree$tip.label)
setdiff(nearctic_assoc_data$Parasite, global_tree$tip.label)
global_tree$tip.label
sort(global_tree$tip.label)
nearctic_assoc_data$Parasite=="Ascaris lumbricoides"
which(nearctic_assoc_data$Parasite=="Ascaris lumbricoides")
nearctic_assoc_data[which(nearctic_assoc_data$Parasite=="Ascaris lumbricoides"),]
## Remove Ascaris lumbricoides from the Nearctic dataset because it is a human parasite
nearctic_assoc_data <- nearctic_assoc_data[-which(nearctic_assoc_data$Parasite=="Ascaris lumbricoides"),]
saveRDS(nearctic_assoc_data, "Nearctic_data.RDS")
library(ape)
library(tidyverse)
library(ouch)
library(phytools)
library(geiger)
library(caper)
library(picante)
library(pmc)
library(corHMM)
library(OUwie)
Nearctic_mammal_tree <- readRDS("Nearctic_mammal_tree.RDS")
Nearctic_parasite_tree <- readRDS("Nearctic_parasite_tree.RDS")
Nearctic_data <- readRDS("Nearctic_data.RDS")
GMPD_mammal_tree <- readRDS("GMPD_mammal_tree.RDS")
GMPD_parasite_tree <- readRDS("GMPD_parasite_tree.RDS")
GMPD_data <- readRDS("GMPD_data.RDS")
setdiff(Nearctic_mammal_tree$tip.label, Nearctic_data$Host)
setdiff(Nearctic_data$Host, Nearctic_mammal_tree$tip.label)
setdiff(Nearctic_parasite_tree$tip.label, Nearctic_data$Parasite)
setdiff(Nearctic_data$Parasite, Nearctic_parasite_tree$tip.label)
setdiff(GMPD_mammal_tree$tip.label, GMPD_data$Host)
setdiff(GMPD_data$Host, GMPD_mammal_tree$tip.label)
setdiff(GMPD_parasite_tree$tip.label, GMPD_data$Parasite)
setdiff(GMPD_data$Parasite, GMPD_parasite_tree$tip.label)
## load tree
tree<-read.nexus("hel2_44burn_copy.trees")
## load the binomial names for the coded tree names
nom <- read.csv("name_key.csv")
# make nom characters not factors
nom$CorrectName<-as.character(nom$CorrectName)
nom$Code<-as.character(nom$Code)
## ensure that every tip has a binomial name
which(!(tree$tip.label %in% nom[,2])) ## ZTGLUN does not have a binomial name - code should actually be ZYGLUN; fix
tree$tip.label[which(!(tree$tip.label %in% nom[,2]))] <- "ZYGLUN"
## drop 5 nematodes and a acanth that were clearly placed in the wrong areas of the tree
tree <- drop.tip(tree, c("HABMUS","ASCLUM","ASCSUU","PELSTR","FILMAR","PROELE")) #
## binomial names for only the species in the tree
nom[nom$Code %in% tree$tip.label,]->a
##nom in same order as tree tip labels
b<- a[match(tree$tip.label, a$Code),]
#replace code names with binomial names
tree$tip.label<-b$CorrectName
#rename the global tree for GMPD data
global_tree<-tree
## Read in GMPD data
GMPDmain<-read.csv("GMPD_main.csv")
GMPDparasite<-read.csv("GMPD_parasite_traits.csv")
#host-parasite association data
nearctic_assoc_data<-read.csv("Host_Range_Nearctic_Mammals_list.csv", header=T)
#change to characters instead of factors
nearctic_assoc_data$Host<-as.character(nearctic_assoc_data$Host)
nearctic_assoc_data$Parasite<-as.character(nearctic_assoc_data$Parasite)
## Load GMPD data and subset down to the species in the parasite phylogeny
GMPDsmall<-GMPDmain[GMPDmain$ParasiteCorrectedName %in% global_tree$tip.label, ]
GMPDsmall[which(GMPDsmall$HostReportedName=="Macaca hecki / M. tonkeana hybrid"),"HostCorrectedName"] <- "Macaca hecki" ## based on details from that study
GMPDsmall[which(GMPDsmall$HostReportedName=="Hapalemur sp."),"HostCorrectedName"] <- "Hapalemur griseus" ## based on collection location, this is the only species found there
GMPDsmall[which(rownames(GMPDsmall)=="11772"),"HostCorrectedName"] <- "Papio anubis" ## based on collection location
GMPDsmall[which(rownames(GMPDsmall)=="11773"),"HostCorrectedName"] <- "Papio ursinus" ## based on collection location
GMPDsmall[which(rownames(GMPDsmall)=="11862"),"HostCorrectedName"] <- "Papio anubis" ## based on collection location
GMPDsmall[which(rownames(GMPDsmall)=="11863"),"HostCorrectedName"] <- "Papio anubis" ## based on collection location
GMPDsmall[which(rownames(GMPDsmall)=="11864"),"HostCorrectedName"] <- "Papio anubis" ## based on collection location
GMPDsmall[which(rownames(GMPDsmall)=="11865"),"HostCorrectedName"] <- "Papio ursinus" ## based on collection location
GMPDsmall[which(rownames(GMPDsmall)=="11866"),"HostCorrectedName"] <- "Papio ursinus" ## based on collection location
GMPDsmall[which(rownames(GMPDsmall)=="11903"),"HostCorrectedName"] <- "Papio anubis" ## based on collection location
##load complete mammal tree from PHYLACINE
large_mam_tree<-read.nexus("mammal_phylo_consensus.nex")
large_mam_tree$tip.label<-gsub("_", " ", large_mam_tree$tip.label)
#### MAKE A MAMMAL TREE FOR HOSTS IN THE GMPD DATASET ####
## Make GMPD names match Elton binomial names found in the tree
GMPDsmall$HostCorrectedName<-gsub("Cercopithecus albogularis", "Cercopithecus mitis", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Equus burchelli", "Equus quagga", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Equus quaggai", "Equus quagga", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Otaria flavescens", "Otaria byronia", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Cercopithecus lhoesti","Allochrocebus lhoesti", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Equus caballus","Equus ferus", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Lama glama","Lama guanicoe", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Bos frontalis","Bos gaurus", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Equus asinus", "Equus hemionus", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Equus asinus", "Equus hemionus", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Monachus schauinslandi", "Neomonachus schauinslandi", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Neotragus moschatus", "Neotragus pygmaeus", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Ovis aries", "Ovis orientalis", GMPDsmall$HostCorrectedName)
GMPDsmall$HostCorrectedName<-gsub("Taurotragus oryx", "Tragelaphus oryx", GMPDsmall$HostCorrectedName)
##remove records from the GMPD (all from primates) where hosts were identified only to genus (super-weird that this happened!)
GMPDsmall <- GMPDsmall[GMPDsmall$HostCorrectedName!="no binomial name",]
setdiff(large_mam_tree$tip.label, GMPDsmall$HostCorrectedName)
##prune large tree to only include mammals from the GMPD
GMPD_mammal_tree<-drop.tip(large_mam_tree, setdiff(large_mam_tree$tip.label, GMPDsmall$HostCorrectedName))
#### MAKE A MAMMAL TREE FOR HOSTS IN THE NEARCTIC DATASET ####
## Modify the names in the Nearctic dataset to match the names on the large mammal tree
gsub("Mustela vison", "Neovison vison", nearctic_assoc_data$Host) -> nearctic_assoc_data$Host
## rename Alces alces (Eurasian elk) to Alces americanus (American moose) - these are sister species (or even subspecies) so any phylogenetic conclusions are unaltered in an analysis containing only one of the two species
gsub("Alces americanus", "Alces alces", nearctic_assoc_data$Host) -> nearctic_assoc_data$Host
## rename Arctic fox in the data
gsub("Alopex lagopus", "Vulpes lagopus", nearctic_assoc_data$Host) -> nearctic_assoc_data$Host
## rename American porcupine in the data
gsub("Erethizon dorsatus", "Erethizon dorsatum", nearctic_assoc_data$Host) -> nearctic_assoc_data$Host
## Remove Ascaris lumbricoides from the Nearctic dataset because it is a human parasite
nearctic_assoc_data <- nearctic_assoc_data[-which(nearctic_assoc_data$Parasite=="Ascaris lumbricoides"),]
##prune large tree to only include mammals from the Nearctic dataset
nearctic_mammal_tree<-drop.tip(large_mam_tree, setdiff(large_mam_tree$tip.label, nearctic_assoc_data$Host))
##subset global tree to nearctic data
nearctic_tree<-drop.tip(global_tree, setdiff(global_tree$tip.label, nearctic_assoc_data$Parasite))
## save the relevant databases and trees
saveRDS(nearctic_mammal_tree, "Nearctic_mammal_tree.RDS")
saveRDS(nearctic_tree, "Nearctic_parasite_tree.RDS")
saveRDS(nearctic_assoc_data, "Nearctic_data.RDS")
saveRDS(GMPD_mammal_tree, "GMPD_mammal_tree.RDS")
saveRDS(global_tree, "GMPD_parasite_tree.RDS")
saveRDS(GMPDsmall, "GMPD_data.RDS")
## Idiot check: are all parasites and hosts found in both the trees and the association data?
Nearctic_mammal_tree <- readRDS("Nearctic_mammal_tree.RDS")
Nearctic_parasite_tree <- readRDS("Nearctic_parasite_tree.RDS")
Nearctic_data <- readRDS("Nearctic_data.RDS")
GMPD_mammal_tree <- readRDS("GMPD_mammal_tree.RDS")
GMPD_parasite_tree <- readRDS("GMPD_parasite_tree.RDS")
GMPD_data <- readRDS("GMPD_data.RDS")
setdiff(Nearctic_mammal_tree$tip.label, Nearctic_data$Host)
setdiff(Nearctic_data$Host, Nearctic_mammal_tree$tip.label)
setdiff(Nearctic_parasite_tree$tip.label, Nearctic_data$Parasite)
setdiff(Nearctic_data$Parasite, Nearctic_parasite_tree$tip.label)
GMPD_mammal_tree
GMPD_mammal_tree$tip.label
setdiff(GMPD_mammal_tree$tip.label, GMPD_data$Host)
GMPDsmall
GMPD_data
setdiff(GMPD_mammal_tree$tip.label, GMPD_data$HostCorrectedName)
setdiff(GMPD_data$HostCorrectedName, GMPD_mammal_tree$tip.label)
setdiff(GMPD_parasite_tree$tip.label, GMPD_data$ParasiteCorrectedName)
setdiff(GMPD_data$ParasiteCorrectedName, GMPD_parasite_tree$tip.label)
nearctic_mamlist<-as.vector(Nearctic_mammal_tree$tip.label) #list of mammals in tip label order
nearctic_para_list<-as.vector(Nearctic_parasite_tree$tip.label) #list of parasites
#make a dataframe with host names as columns and parasite names as rows
nearctic_df <- data.frame(matrix(ncol=length(nearctic_mamlist),nrow=length(nearctic_para_list)), row.names = nearctic_para_list)
colnames(nearctic_df)<-nearctic_mamlist
# complete dataframe with association data,
# where 0 = not found in host and 1 = found in host
for (i in 1:nrow(nearctic_df))
nearctic_df[i,] <- (colnames(nearctic_df) %in% unique(subset(nearctic_assoc_data, Parasite==rownames(nearctic_df)[i])$Host)) %>% as.numeric
nearctic_mammal_tree <- readRDS("Nearctic_mammal_tree.RDS")
nearctic_parasite_tree <- readRDS("Nearctic_parasite_tree.RDS")
nearctic_data <- readRDS("Nearctic_data.RDS")
gmpd_mammal_tree <- readRDS("GMPD_mammal_tree.RDS")
gmpd_parasite_tree <- readRDS("GMPD_parasite_tree.RDS")
gmpd_data <- readRDS("GMPD_data.RDS")
## Create an association matrix with host across the columns and parasites across the rows
## create a new data.frame with all possible host-parasite combinations
expand.grid(Host.species=(nearctic_data$Host %>% unique),
Parasite.species=(nearctic_data$Parasite %>% unique)) -> ndata
ndata
nearctic_data %>% count(Host,Parasite)
left_join(ndata, data %>% count(HostCorrectedName,ParasiteCorrectedName),
by=c("Host"="Host","Parasite"="Parasite"))$n
left_join(ndata, data %>% count(Host,Parasite),
by=c("Host"="Host","Parasite"="Parasite"))$n
left_join(ndata, nearctic_data %>% count(Host,Parasite),
by=c("Host"="Host","Parasite"="Parasite"))$n
ndata
nearctic_mamlist<-as.vector(nearctic_mammal_tree$tip.label) #list of mammals in tip label order
nearctic_para_list<-as.vector(nearctic_parasite_tree$tip.label) #list of parasites
nearctic_df <- data.frame(matrix(ncol=length(nearctic_mamlist),nrow=length(nearctic_para_list)), row.names = nearctic_para_list)
colnames(nearctic_df)<-nearctic_mamlist
for (i in 1:nrow(nearctic_df))
nearctic_df[i,] <- (colnames(nearctic_df) %in% unique(subset(nearctic_assoc_data, Parasite==rownames(nearctic_df)[i])$Host)) %>% as.numeric
nearctic_df[,1]
nearctic_df[1,]
nearctic_data
nearctic_data$Host
rownames(nearctic_df)[1]
rownames(nearctic_df)[1]
nearctic_data$Host==rownames(nearctic_df)[1]
which(nearctic_data$Host==rownames(nearctic_df)[1])
which(nearctic_data$Parasite==rownames(nearctic_df)[1])
which(nearctic_data$Host==rownames(nearctic_df)[2])
which(nearctic_data$Parasite==rownames(nearctic_df)[2])
which(nearctic_data$Parasite==rownames(nearctic_df)[3])
which(nearctic_data$Parasite==rownames(nearctic_df)[4])
nearctic_data$Host[which(nearctic_data$Parasite==rownames(nearctic_df)[4])]
i = rownames(nearctic_df)[1]
j = rownames(nearctic_df)[2]
j = colnames(nearctic_df)[2]
p = i
h = j
p
h
subset(nearctic_data, Host==h & Parasite==p)
nrow(subset(nearctic_data, Host==h & Parasite==p))
ifelse(nrow(subset(nearctic_data, Host==h & Parasite==p)) > 0, 1, 0)
nearctic_df <- data.frame(matrix(ncol=length(nearctic_mamlist),nrow=length(nearctic_para_list)), row.names = nearctic_para_list)
colnames(nearctic_df)<-nearctic_mamlist
# complete dataframe with association data,
# where 0 = not found in host and 1 = found in host
for (i in 1:nrow(nearctic_df)) {
p <- rownames(nearctic_df)[i]
for (j in 1:ncol(nearctic_df)) {
h <- colnames(nearctic_df)[j]
nearctic_df[i,j] <- ifelse(nrow(subset(nearctic_data, Host==h & Parasite==p)) > 0, 1, 0)
}
}
nearctic_df
colSums(nearctic_df)
nearctic_df2 <- nearctic_df
for (i in 1:nrow(nearctic_df2))
nearctic_df2[i,] <- (colnames(nearctic_df) %in% unique(subset(nearctic_data, Parasite==rownames(nearctic_df)[i])$Host)) %>% as.numeric
nearctic_df2==nearctic_df
all(nearctic_df2==nearctic_df)
nearctic_abund_data<-read.csv("Host_Range_Nearctic_Mammals.csv")
nearctic_abund_data
View(nearctic_parasite_tree)
library(tidyverse)
library(parallel)
## set up
seeds <- floor(runif(20,1,1e5)) # set seeds
tmax <- 150
nocorr <- matrix(c(1,0,0,1), nrow=2, byrow=T)
negcorr <- matrix(c(1,-.5,-.5,1), nrow=2, byrow=T)
poscorr <- matrix(c(1,.5,.5,1), nrow=2, byrow=T)
contact_alpha_pars_og = c(c=.1, shed=.05, alpha=.1, gamma=.1, beta=.25, d=.1,
b=2.5, bs=.01, sd_c=.5, sd_a=.5) # R0=3.8
contact_alpha_pars = c(c=.1, shed=.05, alpha=.1, gamma=.1, sd_c=0.5, sd_shed=0.025,
sd_alpha=0.5, sd_gamma=0.5, b=2.5, d=.1, bs=.01)
initial_state <- floor(c(S =unname(((contact_alpha_pars["b"]-contact_alpha_pars["d"])/contact_alpha_pars["bs"]))-5, I=5, R=0))
## no covariation
source("GEM_SIR_cov_storage.R")
setwd("~/newGEM_SIR/Analysis Code/Covariation")
## no covariation
source("GEM_SIR_cov_storage.R")
## no covariation
source("GEM_SIR_cov_storage.R")
mclapply(seeds,
function(i) gillespie.SIR.cov_storage(tmax=20,
params=contact_alpha_pars,
corr=nocorr,
initial_state,
covParams=c('alpha','c')),
mc.cores=4) -> example
seeds
mclapply(seeds,
function(i) gillespie.SIR.cov_storage(tmax=20,
params=contact_alpha_pars,
corr=nocorr,
initial_state,
covParams=c('alpha','c'),
seed=i),
mc.cores=4) -> example
for (i in seeds) {
gillespie.SIR.cov_storage(tmax=20,
params=contact_alpha_pars,
corr=nocorr,
initial_state,
covParams=c('alpha','c'),
seed=i) -> out
}
out <- vector(mode='list', length=length(seeds))
for (i in 1:length(seeds)) {
print(i)
gillespie.SIR.cov_storage(tmax=20,
params=contact_alpha_pars,
corr=nocorr,
initial_state,
covParams=c('alpha','c'),
seed=seeds[i]) -> out[[i]]
}
seeds[3]
## no covariation
source("GEM_SIR_cov_storage.R")
out <- vector(mode='list', length=length(seeds))
for (i in 1:length(seeds)) {
print(i)
gillespie.SIR.cov_storage(tmax=20,
params=contact_alpha_pars,
corr=nocorr,
initial_state,
covParams=c('alpha','c'),
seed=seeds[i]) -> out[[i]]
}
seeds[14]
tmax
params
params = contact_alpha_pars
params
corr
corr=nocorr
corr
x = initial_state
x
covParams=c('alpha','c')
covParams
set.seed(20592)
b = params["b"]
bs = params["bs"]
d = params["d"]
S=x["S"]
I=x["I"]
R=x["R"]
storage <- data.frame(ID=1:1e5, c=rep(NA,1e5), shed=rep(NA,1e5), alpha=rep(NA,1e5), gamma=rep(NA,1e5), numInf=rep(0,1e5), tInf=rep(NA,1e5), tEnd=rep(Inf,1e5))
## also set up some storage that just keeps track of the population sizes at every moment in time
popSizes <- vector(mode='list', 1e6)
## draw the covarying traits of our initial infected individuals and store them
new_i <- pick_individuals_multivariate(I, traitmeans=params[covParams], traitsds=params[paste('sd',covParams,sep="_")], corr=corr)
storage[1:I,c('c','shed','alpha','gamma','tInf')] <- data.frame(c=ifelse(rep('c' %in% covParams,I), new_i[,'c'], rep(params['c'],I)),
shed=ifelse(rep('shed' %in% covParams,I), new_i[,'shed'], rep(params['shed'],I)),
alpha=ifelse(rep('alpha' %in% covParams,I), new_i[,'alpha'], rep(params['alpha'],I)),
gamma=ifelse(rep('gamma' %in% covParams,I), new_i[,'gamma'], rep(params['gamma'],I)),
tInf=rep(0,I))
t <- 0
## ID counter (the ID to assign to the next infection)
ID <- I+1
## popSize list counter
i <- 1
#start algorithm
while(t < tmax & I > 0 ) {
#print(t)
## count how many infected people there are right now - these are individuals with birth times <= the current time and death times that are still Inf
## Do this by first collecting all of their IDs
aliveID <- storage[which(with(storage, tInf<=t & is.infinite(tEnd))),'ID']
#print(aliveID)
## number alive is just the length of that vector
I <- length(aliveID)
## Store the current population size and increment the counter
popSizes[[i]] <- c(t, S, I, R)
i <- i + 1
## Calculate the rates
irate = storage[aliveID,'c']*storage[aliveID,'shed']/(1 + storage[aliveID,'shed'])*S ## individual infection rates
rrate = storage[aliveID,'gamma'] ## individual recovery rates
drateI <- d + storage[aliveID,'alpha'] ## individual mortality rates
brate <- (b - bs*(S+I+R)) * (S+I+R) ## population-level birth rate
drateS <- d*S ## population-level death rates for susceptible and recovered hosts
drateR <- d*R
## Put all the rates into a single vector
rates<-c(irate,rrate,drateI,brate,drateS,drateR)
## what time does the event happen?
dt <- rexp(1, rate=sum(rates))
## update t
t <- t + dt
## "wheel of fortune"
wheel <- cumsum(rates)/sum(rates)
## which event happens? Draw a random uniform to determine
rand <- runif(1)
event <- 1 + sum(rand > wheel)
#print(event)
if (event%in%1:I){ ## the first I events are infections
S <- S-1
## the individual who caused the infection has ID equal to aliveID[event] - increase their numInf by 1
storage[aliveID[event],'numInf'] <- storage[aliveID[event],'numInf'] + 1
## generate traits for the new individual
new_i <- pick_individuals_multivariate(1, traitmeans=params[covParams], traitsds=params[paste('sd',covParams,sep="_")], corr=corr)
## assign it to the next ID and store it
storage[ID,c('c','shed','alpha','gamma','tInf')] <- data.frame(c=ifelse('c' %in% covParams, new_i[,'c'], params['c']),
shed=ifelse('shed' %in% covParams, new_i[,'shed'], params['shed']),
alpha=ifelse('alpha' %in% covParams, new_i[,'alpha'], params['alpha']),
gamma=ifelse('gamma' %in% covParams, new_i[,'gamma'], params['gamma']),
tInf=t)
## increment ID by 1
ID <- ID+1
}
else if(event%in%((I+1):(2*I))) { ## events I+1:2*I are all recoveries
R <- R+1
## the individual who recovered has ID equal to aliveID[event-I] - set their tEnd to the current time
storage[aliveID[event-I],'tEnd'] <- t
}
else if(event%in%((2*I+1):(3*I))) { ## events 2*I+1:3*I are all deaths
## the individual who recovery has ID equal to aliveID[event-2*I] - set their tEnd to the current time
storage[aliveID[event-2*I],'tEnd'] <- t
}
else if (event==(3*I+1)) { ## birth of S
S <- S+1
}
else if (event==(3*I+2)) { ## death of S
S <- S-1
}
else {   ### death of R
R <- R-1
}
if (ID > nrow(storage)) ## add more rows to storage if necessary
storage <- rbind(storage, data.frame(ID=(1e5+1):2e5, c=rep(NA,1e5), shed=rep(NA,1e5), alpha=rep(NA,1e5), gamma=rep(NA,1e5), numInf=rep(0,1e5), tInf=rep(NA,1e5), tEnd=rep(Inf,1e5)))
#print(storage[1:ID,])
#readline(prompt="Press [enter] to continue")
}
t
rand
wheel
S
I
storage
## no covariation
source("GEM_SIR_cov_storage.R")
i = 14
gillespie.SIR.cov_storage(tmax=20,
params=contact_alpha_pars,
corr=nocorr,
initial_state,
covParams=c('alpha','c'),
seed=seeds[i]) -> out[[i]]
