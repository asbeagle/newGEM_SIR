pick_individuals <- function(N0, traitmean, traitsd) {
mu <- log(traitmean^2 / sqrt(traitsd^2+traitmean^2))
sigma <- sqrt(log(traitsd^2/traitmean^2 + 1))
## record this initial distribution in the output
return(rlnorm(N0, meanlog=mu, sdlog=sigma))
}
## the original GEM
## This is a stochastic, individual-based implementation of the deterministic model
## dN/dt = (b - bs*N)*N - (d+ds*N)*N
## individuals are assumed to vary in their birth rate, and birth rate determines death rate via a simple tradeoff function: d = slope*b^2
logistic_GEM <- function(seed, dt, tmax, N0, traitmean, traitsd, bs, ds, slope) {
## set RNG seed
set.seed(seed)
## storage for times and trait distributions
## the maximum possible size is tmax/dt+1
time <- rep(0,tmax/dt+1)
output <- vector(mode='list', length=tmax/dt+1)
## initialize counter
i <- 1
## initialize time
t <- 0
lastrecordtime <- t ## the last timepoint that was recorded
time[i] <- t
## initialize trait distribution from lognormal with meanlog and sdlog given by traitmean and traitcv
output[[1]] <- pick_individuals(N0, traitmean, traitsd=traitsd)
## also record it in a vector called 'currentstate' that records the current state of the system only
currentstate <- output[[1]]
while (t < tmax & length(currentstate) > 0) { ## as long as population size is > 0 pick an individual
ind <- sample(1:length(currentstate),1)
trait <- currentstate[ind]
N <- length(currentstate)
## set up rates for each possible event
## birth
brate <- (trait - bs*N)*N
## death (specified by tradeoff between birth and death)
d <- slope*trait^2
drate <- (d + ds*N)*N
events <- c(brate,drate)
## wheel of fortune
wheel <- cumsum(events)/sum(events)
## which event happens?
event <- min(which(runif(1) < wheel))
## when did this event happen?
timestep <- exp(-1/sum(events))/sum(events)
t <- t + timestep
if (event==1) { ## birth
## generate the new individual
newtrait <- pick_individuals(1, traitmean, traitsd)
## add this individual to the current state vector
currentstate <- c(currentstate, newtrait)
}
else  ## death
currentstate <- currentstate[-ind]
## record... but do it smartly, to prevent output from getting so big that it crashes R.
## Record every event if it moves time forward more than dt time steps, otherewise only record every dt timesteps
if (timestep > dt) {
i <- i + 1
time[i] <- t
output[[i]] <- currentstate
lastrecordtime <- lastrecordtime + dt
}
else if ((floor(t/dt)*dt) > lastrecordtime) {
i <- i + 1
time[i] <- t
output[[i]] <- currentstate
lastrecordtime <- floor(t/dt)*dt
}
}
return(list(time=time,traits=output))
}
x = logistic_GEM(1234, 1, 100, 10, 3, 0.3, 0.01, 0.01, 0.1)
x
x$time
t = x$time
N = unlist(lapply(x, function(t) length(t$traits)))
x$traits
lapply(x$traits, length)
unlist(lapply(x$traits, length))
t = x$time
N = unlist(lapply(x$traits, length))
plot(t, N)
x = logistic_GEM(1234, 1, 100, 10, 1, 0.3, 0.01, 0.01, 0.1)
## extract the dynamics of population size
t = x$time
N = unlist(lapply(x$traits, length))
plot(t, N)
x = logistic_GEM(1234, 1, 100, 10, 1, 0.05, 0.01, 0.01, 0.1)
## extract the dynamics of population size
t = x$time
N = unlist(lapply(x$traits, length))
plot(t, N, type='l')
